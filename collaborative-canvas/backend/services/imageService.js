const Image = require('../models/image.model');
const Keyword = require('../models/keyword.model');
const boardService = require('./boardService');
const { deleteS3Image } = require("./s3service");

/**
 * Placeholder function to process an image and generate keywords.
 * Replace with your actual implementation.
 * @param {Object} image - The image document.
 * @returns {Promise<Array>} Array of keyword objects.
 */
const generateKeywordsForImage = async (image) => {
  // For demonstration, we generate one dummy keyword positioned below the image.
  return [
    {
      boardId: image.boardId,
      imageId: image._id,
      offsetX: 20,           // Align with image x
      offsetY: 0,      // 50 pixels below image y
      isSelected: false,
      type: 'AutoGenerated',
      keyword: 'sample-keyword'
    }
  ];
};

/**
 * Create a new image and generate associated keywords.
 * @param {Object} data - Contains boardId, url, x, y.
 * @returns {Promise<Object>} The created image document.
 */
const createImage = async (data) => {
  const { boardId, url, x, y, width, height} = data;
  const image = new Image({ boardId, url, x, y, width, height });
  const savedImage = await image.save();

  // Generate keywords based on the image.
  const keywordsData = await generateKeywordsForImage(savedImage);
  if (keywordsData.length > 0) {
    insertedKeywords = await Keyword.insertMany(keywordsData);

    savedImage.keywords = insertedKeywords.map((keyword) => keyword._id);
    await savedImage.save();
    await savedImage.populate("keywords");
  }

  await boardService.addImageToBoard(boardId, savedImage._id);
  return savedImage;
};

/**
 * Update an image's x and y coordinates.
 * @param {String} imageId - The image's ObjectId.
 * @param {Number} newX - New x coordinate.
 * @param {Number} newY - New y coordinate.
 * @returns {Promise<Object>} The updated image document.
 */
const updateImageCoordinates = async (imageId, newX, newY) => {
  return await Image.findByIdAndUpdate(imageId, { x: newX, y: newY }, { new: true });
};

/**
 * Delete an image and its associated keywords.
 * @param {String} imageId - The image's ObjectId.
 * @returns {Promise<Object>} The deleted image document.
 */
const deleteImage = async (imageId) => {
  const image = await getImageById(imageId)
  if (!image) return { message: "Image not found in database, no action taken" };

  await Keyword.deleteMany({ imageId });
  if (image.url) await deleteS3Image(image.url);
  return await Image.findByIdAndDelete(imageId);
};

/**
 * Get an image by its ID.
 * @param {String} imageId - The image's ObjectId.
 * @returns {Promise<Object>} The image document.
 */
const getImageById = async (imageId) => {
  return await Image.findById(imageId);
};

module.exports = {
  createImage,
  updateImageCoordinates,
  deleteImage,
  getImageById,
};
